#usda 1.0
(
    defaultPrim = "Sphere"
    endFrame = 1
    startFrame = 1
)

def Xform "Sphere" (
    kind = "model"
)
{
    def Mesh "Mesh"
    {
        float3[] extent = [(-7.10811, -7.10811, -7.10811), (7.10811, 7.10811, 7.10811)]
        rel faceSet:material:binding = [
            </Sphere/Materials/initialShadingGroup>,
            </Sphere/Materials/lambert2SG>,
            </Sphere/Materials/lambert3SG>,
        ]
        int[] faceSet:material:faceCounts = [4, 8, 4]
        int[] faceSet:material:faceIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        uniform bool faceSet:material:isPartition = 1
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 5, 4, 1, 2, 6, 5, 2, 3, 7, 6, 3, 0, 4, 7, 4, 5, 9, 8, 5, 6, 10, 9, 6, 7, 11, 10, 7, 4, 8, 11, 1, 0, 12, 2, 1, 12, 3, 2, 12, 0, 3, 12, 8, 9, 13, 9, 10, 13, 10, 11, 13, 11, 8, 13]
        point3f[] points = [(6.59105e-7, 5.02619, -5.02619), (-5.02619, 4.39403e-7, -5.02619), (-2.19702e-7, -5.02619, -5.02619), (5.02619, -1.11604e-15, -5.02619), (9.32115e-7, 7.10811, -1.57832e-15), (-7.10811, 6.2141e-7, -1.37981e-22), (-3.10705e-7, -7.10811, 1.57832e-15), (7.10811, 0, 0), (6.59105e-7, 5.02619, 5.02619), (-5.02619, 4.39403e-7, 5.02619), (-2.19702e-7, -5.02619, 5.02619), (5.02619, 1.11604e-15, 5.02619), (0, -1.57832e-15, -7.10811), (0, 1.57832e-15, 7.10811)]
        float2[] primvars:st = [(0, 0.25), (0.25, 0.25), (0.25, 0.5), (0, 0.5), (0.25, 0.25), (0.5, 0.25), (0.5, 0.5), (0.25, 0.5), (0.5, 0.25), (0.75, 0.25), (0.75, 0.5), (0.5, 0.5), (0.75, 0.25), (1, 0.25), (1, 0.5), (0.75, 0.5), (0, 0.5), (0.25, 0.5), (0.25, 0.75), (0, 0.75), (0.25, 0.5), (0.5, 0.5), (0.5, 0.75), (0.25, 0.75), (0.5, 0.5), (0.75, 0.5), (0.75, 0.75), (0.5, 0.75), (0.75, 0.5), (1, 0.5), (1, 0.75), (0.75, 0.75), (0.25, 0.25), (0, 0.25), (0.125, 0), (0.5, 0.25), (0.25, 0.25), (0.375, 0), (0.75, 0.25), (0.5, 0.25), (0.625, 0), (1, 0.25), (0.75, 0.25), (0.875, 0), (0, 0.75), (0.25, 0.75), (0.125, 1), (0.25, 0.75), (0.5, 0.75), (0.375, 1), (0.5, 0.75), (0.75, 0.75), (0.625, 1), (0.75, 0.75), (1, 0.75), (0.875, 1)] (
            interpolation = "faceVarying"
        )
    }

    def Scope "Materials"
    {
        def Material "initialShadingGroup"
        {
            rel connectedSourceFor:outputs:bxdf = </Sphere/Materials/initialShadingGroup/initialShadingGroup_lambert.outputs:out>
            color3f inputs:displayColor = (0.00902149, 1, 0.0393514)
            float inputs:displayOpacity
            color3f inputs:transparency
            token outputs:bxfd

            def Shader "initialShadingGroup_lambert"
            {
                rel connectedSourceFor:diffuseColor = </Sphere/Materials/initialShadingGroup.inputs:displayColor>
                rel connectedSourceFor:transmissionColor = </Sphere/Materials/initialShadingGroup.inputs:transparency>
                color3f diffuseColor
                uniform token info:id = "PxrDiffuse"
                token outputs:out
                color3f transmissionColor
            }
        }

        def Material "lambert2SG"
        {
            rel connectedSourceFor:outputs:bxdf = </Sphere/Materials/lambert2SG/lambert2SG_lambert.outputs:out>
            color3f inputs:displayColor = (0.0592683, 0.167102, 0.7593)
            float inputs:displayOpacity
            color3f inputs:transparency
            token outputs:bxfd

            def Shader "lambert2SG_lambert"
            {
                rel connectedSourceFor:diffuseColor = </Sphere/Materials/lambert2SG.inputs:displayColor>
                rel connectedSourceFor:transmissionColor = </Sphere/Materials/lambert2SG.inputs:transparency>
                color3f diffuseColor
                uniform token info:id = "PxrDiffuse"
                token outputs:out
                color3f transmissionColor
            }
        }

        def Material "lambert3SG"
        {
            rel connectedSourceFor:outputs:bxdf = </Sphere/Materials/lambert3SG/lambert3SG_lambert.outputs:out>
            color3f inputs:displayColor = (0.835528, 0, 0)
            float inputs:displayOpacity
            color3f inputs:transparency
            token outputs:bxfd

            def Shader "lambert3SG_lambert"
            {
                rel connectedSourceFor:diffuseColor = </Sphere/Materials/lambert3SG.inputs:displayColor>
                rel connectedSourceFor:transmissionColor = </Sphere/Materials/lambert3SG.inputs:transparency>
                color3f diffuseColor
                uniform token info:id = "PxrDiffuse"
                token outputs:out
                color3f transmissionColor
            }
        }
    }
}

